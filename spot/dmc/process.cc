// -*- coding: utf-8 -*-
// Copyright (C) 2018 Laboratoire de Recherche et
// Developpement de l'Epita
//
// This file is part of Spot, a model checking library.
//
// Spot is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// Spot is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
// License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include "config.h"

#include <spot/dmc/process.hh>

// Ignore all errors generated by the compiler when including the mpi library
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsuggest-override"
#pragma GCC diagnostic ignored "-Wzero-as-null-pointer-constant"
#include <mpi.h>
#pragma GCC diagnostic pop

namespace spot
{
/* initializes the communication context according to the desired multithreads
 * support */
process::process(int nb_threads)
{
  int lenght = 0;

  if (nb_threads > 1)
    MPI_Init_thread(nullptr, nullptr, MPI_THREAD_MULTIPLE,
                    &this->thread_level_support);

  else
    MPI_Init(nullptr, nullptr);

  MPI_Comm_rank(MPI_COMM_WORLD, &this->rank);
  MPI_Get_processor_name(this->host_name, &lenght);
}

process::~process(void)
{}

int process::get_rank(void)
{
  return this->rank;
}

char* process::get_host_name(void)
{
  return this->host_name;
}
}  // namespace spot