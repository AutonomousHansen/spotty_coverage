{
 "metadata": {
  "name": "",
  "signature": "sha256:94749fc5612086a1e856fd05578313afa392f7178902f52e3a87a446af64635c"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import pandas as pd\n",
      "import matplotlib.pyplot as plt\n",
      "%matplotlib inline\n",
      "data = pd.read_csv(\"result.csv\")\n",
      "grouped = data.groupby(\"method\")\n",
      "columns = dict()\n",
      "for i in data.columns.values.tolist():\n",
      "    columns[i] = 0\n",
      "col_name = sorted(list(columns.keys()))\n",
      "for i, name in enumerate(col_name):\n",
      "    print(str(i) + \": \" + name)\n",
      "data"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "xaxis = col_name[5] # number of states\n",
      "yaxis = col_name[6] # time\n",
      "\n",
      "columns[col_name[1]] = 0.5 # density\n",
      "columns[col_name[3]] = 9 # number of atomic propositions\n",
      "columns[col_name[4]] = 9 # number of automata\n",
      "\n",
      "params = [1, 3, 4] # Selection using density, AP and number of automata\n",
      "\n",
      "plot_data = []\n",
      "for group in grouped.groups:\n",
      "    group_plot = grouped.get_group(group)\n",
      "    for i in params:\n",
      "        group_plot = (group_plot.loc[group_plot[col_name[i]] == columns[col_name[i]]])\n",
      "    if not group_plot.empty:\n",
      "        plot_data.append(group_plot)\n",
      "if plot_data == []:\n",
      "    print(\"No data to plot\")\n",
      "else:\n",
      "    ax = plot_data[0].plot(x=xaxis, y=yaxis)\n",
      "    for i in plot_data[1:]:\n",
      "        ax = i.plot(x=xaxis, y=yaxis, ax=ax)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}
