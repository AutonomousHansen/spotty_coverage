adding.1	F ("c==17")
adding.2	F ("c==500")
adding.3	F ("c==637")
adding.4	F ("c==749")
adding.5	F ("c==849")
adding.6	F ("c==949")
anderson.1	G((P_0.p1|P_0.p2|P_0.p3) -> F(P_0.CS))
anderson.1	G(!P_0.CS -> F(P_0.CS))
anderson.1	GF(P_0.CS|P_1.CS)
anderson.2	G((P_0.p1|P_0.p2|P_0.p3) -> F(P_0.CS))
anderson.2	G(!P_0.CS -> F(P_0.CS))
anderson.2	GF(P_0.CS|P_1.CS|P_2.CS)
anderson.3	G((P_0.p1|P_0.p2|P_0.p3) -> F(P_0.CS))
anderson.3	G(!P_0.CS -> F(P_0.CS))
anderson.3	GF(P_0.CS|P_1.CS|P_2.CS)
anderson.4	G((P_0.p1|P_0.p2|P_0.p3) -> F(P_0.CS))
anderson.4	G(!P_0.CS -> F(P_0.CS))
anderson.4	GF(P_0.CS|P_1.CS|P_2.CS|P_3.CS)
anderson.5	G((P_0.p1|P_0.p2|P_0.p3) -> F(P_0.CS))
anderson.5	G(!P_0.CS -> F(P_0.CS))
anderson.5	GF(P_0.CS|P_1.CS|P_2.CS|P_3.CS)
anderson.6	G((P_0.p1|P_0.p2|P_0.p3) -> F(P_0.CS))
anderson.6	G(!P_0.CS -> F(P_0.CS))
anderson.6	GF(P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS|P_5.CS)
anderson.7	G((P_0.p1|P_0.p2|P_0.p3) -> F(P_0.CS))
anderson.7	G(!P_0.CS -> F(P_0.CS))
anderson.7	GF(P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS|P_5.CS)
anderson.8	G((P_0.p1|P_0.p2|P_0.p3) -> F(P_0.CS))
anderson.8	G(!P_0.CS -> F(P_0.CS))
anderson.8	GF(P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS|P_5.CS|P_6.CS)
at.1	G ((P_0.p3 ) -> F ((P_0.CS )))
at.1	G((!(P_0.CS )) -> F (P_0.CS ))
at.1	GF(P_0.CS|P_1.CS|P_2.CS)
at.2	G ((P_0.p3 ) -> F ((P_0.CS )))
at.2	G((!(P_0.CS )) -> F (P_0.CS ))
at.2	GF(P_0.CS|P_1.CS|P_2.CS)
at.3	G ((P_0.p3 ) -> F ((P_0.CS )))
at.3	G((!(P_0.CS )) -> F (P_0.CS ))
at.3	GF(P_0.CS|P_1.CS|P_2.CS|P_3.CS)
at.4	G ((P_0.p3 ) -> F ((P_0.CS )))
at.4	G((!(P_0.CS )) -> F (P_0.CS ))
at.4	GF(P_0.CS|P_1.CS|P_2.CS|P_3.CS)
at.5	G ((P_0.p3 ) -> F ((P_0.CS )))
at.5	G((!(P_0.CS )) -> F (P_0.CS ))
at.5	GF(P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS)
at.6	G ((P_0.p3 ) -> F ((P_0.CS )))
at.6	G((!(P_0.CS )) -> F (P_0.CS ))
at.6	GF(P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS)
at.7	G ((P_0.p3 ) -> F ((P_0.CS )))
at.7	G((!(P_0.CS )) -> F (P_0.CS ))
at.7	GF(P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS|P_5.CS)
bakery.1	G ((P_0.choose|P_0.for_loop|P_0.wait ) -> F((P_0.CS )) )
bakery.1	G((!(P_0.CS )) -> F (P_0.CS ))
bakery.1	GF(P_0.CS|P_1.CS)
bakery.2	G ((P_0.choose|P_0.for_loop|P_0.wait ) -> F((P_0.CS )) )
bakery.2	G((!(P_0.CS )) -> F (P_0.CS ))
bakery.2	GF(P_0.CS|P_1.CS)
bakery.3	G ((P_0.choose|P_0.for_loop|P_0.wait ) -> F((P_0.CS )) )
bakery.3	G((!(P_0.CS )) -> F (P_0.CS ))
bakery.3	GF(P_0.CS|P_1.CS|P_2.CS)
bakery.4	G ((P_0.choose|P_0.for_loop|P_0.wait ) -> F((P_0.CS )) )
bakery.4	G((!(P_0.CS )) -> F (P_0.CS ))
bakery.4	GF(P_0.CS|P_1.CS|P_2.CS)
bakery.5	G ((P_0.choose|P_0.for_loop|P_0.wait ) -> F((P_0.CS )) )
bakery.5	G((!(P_0.CS )) -> F (P_0.CS ))
bakery.5	GF(P_0.CS|P_1.CS|P_2.CS|P_3.CS)
bakery.6	G ((P_0.choose|P_0.for_loop|P_0.wait ) -> F((P_0.CS )) )
bakery.6	G((!(P_0.CS )) -> F (P_0.CS ))
bakery.6	GF(P_0.CS|P_1.CS|P_2.CS|P_3.CS)
bakery.7	G ((P_0.choose|P_0.for_loop|P_0.wait ) -> F((P_0.CS )) )
bakery.7	G((!(P_0.CS )) -> F (P_0.CS ))
bakery.7	GF(P_0.CS|P_1.CS|P_2.CS|P_3.CS)
bakery.8	G ((P_0.choose|P_0.for_loop|P_0.wait ) -> F((P_0.CS )) )
bakery.8	G((!(P_0.CS )) -> F (P_0.CS ))
bakery.8	GF(P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS)
blocks.2	F(Hand.done)
blocks.3	F(Hand.done)
blocks.4	F(Hand.done)
bopdp.1	G ( (("sleeping==0") & ("sleep_op==0")) -> ((!("sleep_op==0")) R (("sleeping==0") | (! ("sleep_op==0")))) )
bopdp.1	G ((IOP.active ) -> ((IOP.stand_by ) R ((!(IOP.noise )) | (IOP.stand_by ))))
bopdp.1	G ( (("sleeping==0") & ("lsl_interrupt==1" | "ap_interrupt==1" )) -> ((! ("lsl_interrupt==1" | "ap_interrupt==1" )) R (("sleeping==0" ) | (! ("lsl_interrupt==1" | "ap_interrupt==1" )))) )
bopdp.1	G ((IOP.stand_by ) -> ((IOP.now_wait || IOP.back_to_active) R ( (!(IOP.active )) || (IOP.now_wait || IOP.back_to_active))))
bopdp.2	G ( (("sleeping==0") & ("sleep_op==0")) -> ((!("sleep_op==0")) R (("sleeping==0") | (! ("sleep_op==0")))) )
bopdp.2	G ((IOP.active ) -> ((IOP.stand_by ) R ((!(IOP.noise )) | (IOP.stand_by ))))
bopdp.2	G ( (("sleeping==0") & ("lsl_interrupt==1" | "ap_interrupt==1" )) -> ((! ("lsl_interrupt==1" | "ap_interrupt==1" )) R (("sleeping==0" ) | (! ("lsl_interrupt==1" | "ap_interrupt==1" )))) )
bopdp.2	G ((IOP.stand_by ) -> ((IOP.now_wait || IOP.back_to_active) R ( (!(IOP.active )) || (IOP.now_wait || IOP.back_to_active))))
bopdp.3	G ( (("sleeping==0") & ("sleep_op==0")) -> ((!("sleep_op==0")) R (("sleeping==0") | (! ("sleep_op==0")))) )
bopdp.3	G ((IOP.active ) -> ((IOP.stand_by ) R ((!(IOP.noise )) | (IOP.stand_by ))))
bopdp.3	G ( (("sleeping==0") & ("lsl_interrupt==1" | "ap_interrupt==1" )) -> ((! ("lsl_interrupt==1" | "ap_interrupt==1" )) R (("sleeping==0" ) | (! ("lsl_interrupt==1" | "ap_interrupt==1" )))) )
bopdp.3	G ((IOP.stand_by ) -> ((IOP.now_wait || IOP.back_to_active) R ( (!(IOP.active )) || (IOP.now_wait || IOP.back_to_active))))
bridge.1	F ("on_right==4")
bridge.2	F ("on_right==6")
bridge.3	F ("on_right==8")
brp.1	F (Consumer.st_error )
brp.1	G ((Producer.wait_result ) -> F (Producer.check ))
brp.1	G ((Producer.wait_result ) -> F (Producer.ready ))
brp.2	F (Consumer.st_error )
brp.2	G ((Producer.wait_result ) -> F (Producer.check ))
brp.2	G ((Producer.wait_result ) -> F (Producer.ready ))
brp.3	F (Consumer.st_error )
brp.3	G ((Producer.wait_result ) -> F (Producer.check ))
brp.3	G ((Producer.wait_result ) -> F (Producer.ready ))
brp.4	F (Consumer.st_error )
brp.4	G ((Producer.wait_result ) -> F (Producer.check ))
brp.4	G ((Producer.wait_result ) -> F (Producer.ready ))
brp.5	F (Consumer.st_error )
brp.5	G ((Producer.wait_result ) -> F (Producer.check ))
brp.5	G ((Producer.wait_result ) -> F (Producer.ready ))
brp.6	F (Consumer.st_error )
brp.6	G ((Producer.wait_result ) -> F (Producer.check ))
brp.6	G ((Producer.wait_result ) -> F (Producer.ready ))
brp2.1	F(Sender.error & "X == 31" & (! Receiver.new_file))
brp2.1	F("File == 0" & ((SClient.ok & RClient.nok) | (RClient.ok & SClient.nok)))
brp2.2	F(Sender.error & "X == 22" & (! Receiver.new_file))
brp2.2	F("File == 0" & ((SClient.ok & RClient.nok) | (RClient.ok & SClient.nok)))
brp2.3	F(Sender.error & "X == 30" & (! Receiver.new_file))
brp2.3	F("File == 0" & ((SClient.ok & RClient.nok) | (RClient.ok & SClient.nok)))
brp2.4	F(Sender.error & "X == 76" & (! Receiver.new_file))
brp2.4	F("File == 0" & ((SClient.ok & RClient.nok) | (RClient.ok & SClient.nok)))
brp2.5	F(Sender.error & "X == 63" & (! Receiver.new_file))
brp2.5	F("File == 0" & ((SClient.ok & RClient.nok) | (RClient.ok & SClient.nok)))
brp2.6	F(Sender.error & "X == 156" & (! Receiver.new_file))
brp2.6	F("File == 0" & ((SClient.ok & RClient.nok) | (RClient.ok & SClient.nok)))
cambridge.1	F(Sender.q_error )
cambridge.1	F(Receiver.q_error )
cambridge.2	F(Sender.q_error )
cambridge.2	F(Receiver.q_error )
cambridge.3	F(Sender.q_error )
cambridge.3	F(Receiver.q_error )
cambridge.4	F(Sender.q_error )
cambridge.4	F(Receiver.q_error )
cambridge.5	F(Sender.q_error )
cambridge.5	F(Receiver.q_error )
cambridge.6	F(Sender.q_error )
cambridge.6	F(Receiver.q_error )
cambridge.7	F(Sender.q_error )
cambridge.7	F(Receiver.q_error )
collision.1	F(Medium.collision)
collision.2	F(Medium.collision)
collision.3	F(Medium.collision)
collision.4	F(Medium.collision)
collision.5	F(Medium.collision)
collision.6	F(Medium.collision)
cyclic_scheduler.1	F(customer_0.q_error)
cyclic_scheduler.2	F(customer_0.q_error)
cyclic_scheduler.3	F(customer_0.q_error)
cyclic_scheduler.4	F(customer_0.q_error)
driving_phils.1	G (("acquiring[0] != -1") -> F ("acquiring[0] == -1"))
driving_phils.1	GF ("acquiring[0] != -1" )
driving_phils.2	G (("acquiring[0] != -1") -> F ("acquiring[0] == -1"))
driving_phils.2	GF ("acquiring[0] != -1" )
driving_phils.3	G (("acquiring[0] != -1") -> F ("acquiring[0] == -1"))
driving_phils.3	GF ("acquiring[0] != -1" )
driving_phils.4	G (("acquiring[0] != -1") -> F ("acquiring[0] == -1"))
driving_phils.4	GF ("acquiring[0] != -1" )
driving_phils.5	G (("acquiring[0] != -1") -> F ("acquiring[0] == -1"))
driving_phils.5	GF ("acquiring[0] != -1" )
***driving_phils.1	F ("res0[0] == res0[1]" ) | ("res0[0] == res1[1]" )
***driving_phils.2	F ("res0[0] == res0[1]" ) | ("res0[0] == res1[1]" )
***driving_phils.3	F ("res0[0] == res0[1]" ) | ("res0[0] == res1[1]" )
***driving_phils.4	F ("res0[0] == res0[1]" ) | ("res0[0] == res1[1]" )
***driving_phils.5	F ("res0[0] == res0[1]" ) | ("res0[0] == res1[1]" )
elevator.1	F((Person_0.in_elevator ) & (Person_1.in_elevator ))
elevator.1	G((Person_0.waiting ) -> (F(Person_0.in_elevator )))
elevator.1	G((Person_0.in_elevator ) ->(F (Person_0.out )))
elevator.2	F((Person_0.in_elevator ) & (Person_1.in_elevator ))
elevator.2	G((Person_0.waiting ) -> (F(Person_0.in_elevator )))
elevator.2	G((Person_0.in_elevator ) ->(F (Person_0.out )))
elevator.3	F((Person_0.in_elevator ) & (Person_1.in_elevator ))
elevator.3	G((Person_0.waiting ) -> (F(Person_0.in_elevator )))
elevator.3	G((Person_0.in_elevator ) ->(F (Person_0.out )))
elevator.4	F((Person_0.in_elevator ) & (Person_1.in_elevator ))
elevator.4	G((Person_0.waiting ) -> (F(Person_0.in_elevator )))
elevator.4	G((Person_0.in_elevator ) ->(F (Person_0.out )))
elevator.5	F((Person_0.in_elevator ) & (Person_1.in_elevator ))
elevator.5	G((Person_0.waiting ) -> (F(Person_0.in_elevator )))
elevator.5	G((Person_0.in_elevator ) ->(F (Person_0.out )))
elevator2.1	G(("req[0] == 1" )->(F(("p == 1" ) & (cabin.open ))))
elevator2.1	G(("req[0] == 1" )->(!("p == 1" )U((" p == 1 ")U(("p == 1" )& (cabin.open )))))
elevator2.1	G(("req[0] == 1" )->(!("p == 1" )U(("p==1")U(!("p == 1" )U(("p == 1" )U(("p == 1")&(cabin.open )))))))
elevator2.1	G(("req[0] == 1" )->(!("p == 0" )U(("p == 0")U(!("p == 0" )U(("p == 0" )U(("p == 0")&(cabin.open )))))))
elevator2.1	F(G ("p == 1" ))
elevator2.2	G(("req[0] == 1" )->(F(("p == 1" ) & (cabin.open ))))
elevator2.2	G(("req[0] == 1" )->(!("p == 1" )U((" p == 1 ")U(("p == 1" )& (cabin.open )))))
elevator2.2	G(("req[0] == 1" )->(!("p == 1" )U(("p==1")U(!("p == 1" )U(("p == 1" )U(("p == 1")&(cabin.open )))))))
elevator2.2	G(("req[0] == 1" )->(!("p == 0" )U(("p == 0")U(!("p == 0" )U(("p == 0" )U(("p == 0")&(cabin.open )))))))
elevator2.2	F(G ("p == 1" ))
elevator2.3	G(("req[0] == 1" )->(F(("p == 1" ) & (cabin.open ))))
elevator2.3	G(("req[0] == 1" )->(!("p == 1" )U((" p == 1 ")U(("p == 1" )& (cabin.open )))))
elevator2.3	G(("req[0] == 1" )->(!("p == 1" )U(("p==1")U(!("p == 1" )U(("p == 1" )U(("p == 1")&(cabin.open )))))))
elevator2.3	G(("req[0] == 1" )->(!("p == 0" )U(("p == 0")U(!("p == 0" )U(("p == 0" )U(("p == 0")&(cabin.open )))))))
elevator2.3	F(G ("p == 1" ))
elevator_planning.1	F(Elevator.done )
elevator_planning.2	F(Elevator.done )
elevator_planning.3	F(Elevator.done )
exit.1	F("at_modul == 1")
exit.2	F("at_modul == 2")
exit.3	F("at_modul == 2")
exit.4	F("at_modul == 2")
exit.5	F("at_modul == 3")
extinction.1	F("leaders_num > 1")
extinction.1	F("leaders_num > 0")
extinction.2	F("leaders_num > 1")
extinction.2	F("leaders_num > 0")
extinction.3	F("leaders_num > 1")
extinction.3	F("leaders_num > 0")
extinction.4	F("leaders_num > 1")
extinction.4	F("leaders_num > 0")
firewire_tree.1	F("elected_num == 2")
firewire_tree.1	F("elected == 0" )
firewire_tree.1	F("elected == 1" )
firewire_tree.2	F("elected_num == 2")
firewire_tree.2	F("elected == 0" )
firewire_tree.2	F("elected == 1" )
firewire_tree.3	F("elected_num == 2")
firewire_tree.3	F("elected == 0" )
firewire_tree.3	F("elected == 1" )
firewire_tree.4	F("elected_num == 2")
firewire_tree.4	F("elected == 0" )
firewire_tree.4	F("elected == 1" )
firewire_tree.5	F("elected_num == 2")
firewire_tree.5	F("elected == 0" )
firewire_tree.5	F("elected == 1" )
fischer.1	G ((P_0.try ) -> F ((P_0.CS )) )
fischer.1	G((!(P_0.CS )) -> F (P_0.CS ))
fischer.1	GF (P_0.CS|P_1.CS|P_2.CS)
fischer.2	G ((P_0.try ) -> F ((P_0.CS )) )
fischer.2	G((!(P_0.CS )) -> F (P_0.CS ))
fischer.2	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS)
fischer.3	G ((P_0.try ) -> F ((P_0.CS )) )
fischer.3	G((!(P_0.CS )) -> F (P_0.CS ))
fischer.3	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS|P_5.CS)
fischer.4	G ((P_0.try ) -> F ((P_0.CS )) )
fischer.4	G((!(P_0.CS )) -> F (P_0.CS ))
fischer.4	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS|P_5.CS|P_6.CS)
fischer.5	G ((P_0.try ) -> F ((P_0.CS )) )
fischer.5	G((!(P_0.CS )) -> F (P_0.CS ))
fischer.5	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS|P_5.CS|P_6.CS)
fischer.6	G ((P_0.try ) -> F ((P_0.CS )) )
fischer.6	G((!(P_0.CS )) -> F (P_0.CS ))
fischer.6	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS|P_5.CS|P_6.CS|P_7.CS)
fischer.7	G ((P_0.try ) -> F ((P_0.CS )) )
fischer.7	G((!(P_0.CS )) -> F (P_0.CS ))
fischer.7	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS|P_5.CS|P_6.CS|P_7.CS)
frogs.1	F(Check.done )
frogs.2	F(Check.done )
frogs.3	F(Check.done )
frogs.4	F(Check.done )
frogs.5	F(Check.done )
gear.1	F("currentGear == 5" )
gear.1	F(Clutch.error_open )
gear.1	F(Clutch.error_close )
gear.1	F(Engine.error_speed )
gear.2	F("currentGear == 30" )
gear.2	F(Clutch.error_open )
gear.2	F(Clutch.error_close )
gear.2	F(Engine.error_speed )
hanoi.1	F("c_act == 8" )
hanoi.2	F("c_act == 12" )
hanoi.3	F("c_act == 15" )
hanoi.4	F("c_act == 17" )
iprotocol.1	F (Consumer.consume )
iprotocol.1	G F (Consumer.consume )
iprotocol.1	((G F (Medium.dataOk )) & (G F (Medium.nakOk ))) -> (G F(Consumer.consume ))
iprotocol.2	F (Consumer.consume )
iprotocol.2	G F (Consumer.consume )
iprotocol.2	((G F (Medium.dataOk )) & (G F (Medium.nakOk ))) -> (G F(Consumer.consume ))
iprotocol.3	F (Consumer.consume )
iprotocol.3	G F (Consumer.consume )
iprotocol.3	((G F (Medium.dataOk )) & (G F (Medium.nakOk ))) -> (G F(Consumer.consume ))
iprotocol.4	F (Consumer.consume )
iprotocol.4	G F (Consumer.consume )
iprotocol.4	((G F (Medium.dataOk )) & (G F (Medium.nakOk ))) -> (G F(Consumer.consume ))
iprotocol.5	F (Consumer.consume )
iprotocol.5	G F (Consumer.consume )
iprotocol.5	((G F (Medium.dataOk )) & (G F (Medium.nakOk ))) -> (G F(Consumer.consume ))
iprotocol.6	F (Consumer.consume )
iprotocol.6	G F (Consumer.consume )
iprotocol.6	((G F (Medium.dataOk )) & (G F (Medium.nakOk ))) -> (G F(Consumer.consume ))
iprotocol.7	F (Consumer.consume )
iprotocol.7	G F (Consumer.consume )
iprotocol.7	((G F (Medium.dataOk )) & (G F (Medium.nakOk ))) -> (G F(Consumer.consume ))
krebs.1	F("energy > 5" )
krebs.2	F("energy > 20" )
krebs.3	F("energy > 50" )
krebs.4	F("energy > 80" )
lamport.1	G ((P_0.q1 ) -> F ((P_0.CS )) )
lamport.1	G((!(P_0.CS )) -> F (P_0.CS ))
lamport.1	GF (P_0.CS|P_1.CS|P_2.CS)
lamport.2	G ((P_0.q1 ) -> F ((P_0.CS )) )
lamport.2	G((!(P_0.CS )) -> F (P_0.CS ))
lamport.2	GF (P_0.CS|P_1.CS|P_2.CS)
lamport.3	G ((P_0.q1 ) -> F ((P_0.CS )) )
lamport.3	G((!(P_0.CS )) -> F (P_0.CS ))
lamport.3	GF (P_0.CS|P_1.CS|P_2.CS)
lamport.5	G ((P_0.q1 ) -> F ((P_0.CS )) )
lamport.5	G((!(P_0.CS )) -> F (P_0.CS ))
lamport.5	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS)
lamport.6	G ((P_0.q1 ) -> F ((P_0.CS )) )
lamport.6	G((!(P_0.CS )) -> F (P_0.CS ))
lamport.6	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS)
lamport.7	G ((P_0.q1 ) -> F ((P_0.CS )) )
lamport.7	G((!(P_0.CS )) -> F (P_0.CS ))
lamport.7	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS)
lamport.8	G ((P_0.q1 ) -> F ((P_0.CS )) )
lamport.8	G((!(P_0.CS )) -> F (P_0.CS ))
lamport.8	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS)
lamport_nonatomic.1	G ((P_0.w1 ) -> F ((P_0.CS )) )
lamport_nonatomic.1	G((!(P_0.CS )) -> F (P_0.CS ))
lamport_nonatomic.1	GF (P_0.CS|P_1.CS|P_2.CS)
lamport_nonatomic.2	G ((P_0.w1 ) -> F ((P_0.CS )) )
lamport_nonatomic.2	G((!(P_0.CS )) -> F (P_0.CS ))
lamport_nonatomic.2	GF (P_0.CS|P_1.CS|P_2.CS)
lamport_nonatomic.3	G ((P_0.w1 ) -> F ((P_0.CS )) )
lamport_nonatomic.3	G((!(P_0.CS )) -> F (P_0.CS ))
lamport_nonatomic.3	GF (P_0.CS|P_1.CS|P_2.CS)
lamport_nonatomic.4	G ((P_0.w1 ) -> F ((P_0.CS )) )
lamport_nonatomic.4	G((!(P_0.CS )) -> F (P_0.CS ))
lamport_nonatomic.4	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS)
lamport_nonatomic.5	G ((P_0.w1 ) -> F ((P_0.CS )) )
lamport_nonatomic.5	G((!(P_0.CS )) -> F (P_0.CS ))
lamport_nonatomic.5	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS)
lann.1	GF (P_0.CS|P_1.CS|P_2.CS)
lann.1	GF (P_0.CS )
lann.2	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS)
lann.2	GF (P_0.CS )
lann.3	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS)
lann.3	GF (P_0.CS )
lann.4	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS)
lann.4	GF (P_0.CS )
lann.5	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS|P_5.CS)
lann.5	GF (P_0.CS )
lann.6	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS)
lann.6	GF (P_0.CS )
lann.7	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS)
lann.7	GF (P_0.CS )
lann.8	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS)
lann.8	GF (P_0.CS )
leader_election.1	F ("nr_leaders > 1" )
leader_election.1	F ("nr_leaders > 0" )
leader_election.2	F ("nr_leaders > 1" )
leader_election.2	F ("nr_leaders > 0" )
leader_election.3	F ("nr_leaders > 1" )
leader_election.3	F ("nr_leaders > 0" )
leader_election.4	F ("nr_leaders > 1" )
leader_election.4	F ("nr_leaders > 0" )
leader_election.5	F ("nr_leaders > 1" )
leader_election.5	F ("nr_leaders > 0" )
leader_election.6	F ("nr_leaders > 1" )
leader_election.6	F ("nr_leaders > 0" )
leader_filters.1	F(P_0.elected|P_1.elected|P_2.elected)
leader_filters.2	F(P_0.elected|P_1.elected|P_2.elected)
leader_filters.3	F(P_0.elected|P_1.elected|P_2.elected|P_3.elected)
leader_filters.4	F(P_0.elected|P_1.elected|P_2.elected|P_3.elected)
leader_filters.5	F(P_0.elected|P_1.elected|P_2.elected|P_3.elected|P_4.elected)
leader_filters.6	F(P_0.elected|P_1.elected|P_2.elected|P_3.elected|P_4.elected)
leader_filters.7	F(P_0.elected|P_1.elected|P_2.elected|P_3.elected|P_4.elected|P_5.elected)
lifts.1	F(Wheels.error_state )
lifts.1	(GF (Environment.pressed_up_0 )) -> (GF (Wheels.moving_up ))
lifts.1	G ((Environment.pressed_up_0 ) -> F (Wheels.moving_up ))
lifts.1	((! (Wheels.moving_up )) U (Environment.pressed_up_0 )) || G (!(Wheels.moving_up ))
lifts.2	F(Wheels.error_state )
lifts.2	(GF (Environment.pressed_up_0 )) -> (GF (Wheels.moving_up ))
lifts.2	G ((Environment.pressed_up_0 ) -> F (Wheels.moving_up ))
lifts.2	((! (Wheels.moving_up )) U (Environment.pressed_up_0 )) || G (!(Wheels.moving_up ))
lifts.3	F(Wheels.error_state )
lifts.3	(GF (Environment.pressed_up_0 )) -> (GF (Wheels.moving_up ))
lifts.3	G ((Environment.pressed_up_0 ) -> F (Wheels.moving_up ))
lifts.3	((! (Wheels.moving_up )) U (Environment.pressed_up_0 )) || G (!(Wheels.moving_up ))
lifts.4	F(Wheels.error_state )
lifts.4	(GF (Environment.pressed_up_0 )) -> (GF (Wheels.moving_up ))
lifts.4	G ((Environment.pressed_up_0 ) -> F (Wheels.moving_up ))
lifts.4	((! (Wheels.moving_up )) U (Environment.pressed_up_0 )) || G (!(Wheels.moving_up ))
lifts.5	F(Wheels.error_state )
lifts.5	(GF (Environment.pressed_up_0 )) -> (GF (Wheels.moving_up ))
lifts.5	G ((Environment.pressed_up_0 ) -> F (Wheels.moving_up ))
lifts.5	((! (Wheels.moving_up )) U (Environment.pressed_up_0 )) || G (!(Wheels.moving_up ))
lifts.6	F(Wheels.error_state )
lifts.6	(GF (Environment.pressed_up_0 )) -> (GF (Wheels.moving_up ))
lifts.6	G ((Environment.pressed_up_0 ) -> F (Wheels.moving_up ))
lifts.6	((! (Wheels.moving_up )) U (Environment.pressed_up_0 )) || G (!(Wheels.moving_up ))
lifts.7	F(Wheels.error_state )
lifts.7	(GF (Environment.pressed_up_0 )) -> (GF (Wheels.moving_up ))
lifts.7	G ((Environment.pressed_up_0 ) -> F (Wheels.moving_up ))
lifts.7	((! (Wheels.moving_up )) U (Environment.pressed_up_0 )) || G (!(Wheels.moving_up ))
lifts.8	F(Wheels.error_state )
lifts.8	(GF (Environment.pressed_up_0 )) -> (GF (Wheels.moving_up ))
lifts.8	G ((Environment.pressed_up_0 ) -> F (Wheels.moving_up ))
lifts.8	((! (Wheels.moving_up )) U (Environment.pressed_up_0 )) || G (!(Wheels.moving_up ))
loyd.1	F(Check.done )
loyd.2	F(Check.done )
loyd.3	F(Check.done )
lup.1	F(lup0.load_data ) & (lup1.load_data )
lup.1	G ((lup0.wait ) -> F (lup0.load_data ))
lup.2	F(lup0.load_data ) & (lup1.load_data )
lup.2	G ((lup0.wait ) -> F (lup0.load_data ))
lup.3	F(lup0.load_data ) & (lup1.load_data )
lup.3	G ((lup0.wait ) -> F (lup0.load_data ))
lup.4	F(lup0.load_data ) & (lup1.load_data )
lup.4	G ((lup0.wait ) -> F (lup0.load_data ))
mcs.1	G ((P_0.p2|P_0.p3|P_0.p4|P_0.p5|P_0.p6 ) -> F ((P_0.CS )) )
mcs.1	G((!(P_0.CS )) -> F (P_0.CS ))
mcs.1	GF (P_0.CS|P_1.CS|P_2.CS)
mcs.2	G ((P_0.p2|P_0.p3|P_0.p4|P_0.p5|P_0.p6 ) -> F ((P_0.CS )) )
mcs.2	G((!(P_0.CS )) -> F (P_0.CS ))
mcs.2	GF (P_0.CS|P_1.CS|P_2.CS)
mcs.3	G ((P_0.p2|P_0.p3|P_0.p4|P_0.p5|P_0.p6 ) -> F ((P_0.CS )) )
mcs.3	G((!(P_0.CS )) -> F (P_0.CS ))
mcs.3	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS)
mcs.4	G ((P_0.p2|P_0.p3|P_0.p4|P_0.p5|P_0.p6 ) -> F ((P_0.CS )) )
mcs.4	G((!(P_0.CS )) -> F (P_0.CS ))
mcs.4	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS)
mcs.5	G ((P_0.p2|P_0.p3|P_0.p4|P_0.p5|P_0.p6 ) -> F ((P_0.CS )) )
mcs.5	G((!(P_0.CS )) -> F (P_0.CS ))
mcs.5	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS)
mcs.6	G ((P_0.p2|P_0.p3|P_0.p4|P_0.p5|P_0.p6 ) -> F ((P_0.CS )) )
mcs.6	G((!(P_0.CS )) -> F (P_0.CS ))
mcs.6	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS)
msmie.1	F(slave_1.error_state )
msmie.2	F(slave_1.error_state )
msmie.3	F(slave_1.error_state )
msmie.4	F(slave_1.error_state )
needham.1	F((initiator_0.finished ) & (responder_0.finished ))
needham.1	F("intruder.kNa == 1" )
needham.1	F(responder_0.finished ) & ("responder_0.party == 7" )
needham.2	F((initiator_0.finished ) & (responder_0.finished ))
needham.2	F("intruder.kNa == 1" )
needham.2	F(responder_0.finished ) & ("responder_0.party == 7" )
needham.3	F((initiator_0.finished ) & (responder_0.finished ))
needham.3	F("intruder.kNa == 1" )
needham.3	F(responder_0.finished ) & ("responder_0.party == 7" )
needham.4	F((initiator_0.finished ) & (responder_0.finished ))
needham.4	F("intruder.kNa == 1" )
needham.4	F(responder_0.finished ) & ("responder_0.party == 7" )
peg_solitaire.1	F("peg_count == 1")
peg_solitaire.2	F("peg_count == 1")
peg_solitaire.3	F("peg_count == 1")
peg_solitaire.4	F("peg_count == 1")
peg_solitaire.5	F("peg_count == 1")
peg_solitaire.6	F("peg_count == 1")
peterson.1	G ((P_0.wait|P_0.q2|P_0.q3 ) -> F ((P_0.CS )) )
peterson.1	G((!(P_0.CS )) -> F (P_0.CS ))
peterson.1	GF (P_0.CS|P_1.CS|P_2.CS)
peterson.2	G ((P_0.wait|P_0.q2|P_0.q3 ) -> F ((P_0.CS )) )
peterson.2	G((!(P_0.CS )) -> F (P_0.CS ))
peterson.2	GF (P_0.CS|P_1.CS|P_2.CS)
peterson.3	G ((P_0.wait|P_0.q2|P_0.q3 ) -> F ((P_0.CS )) )
peterson.3	G((!(P_0.CS )) -> F (P_0.CS ))
peterson.3	GF (P_0.CS|P_1.CS|P_2.CS)
peterson.4	G ((P_0.wait|P_0.q2|P_0.q3 ) -> F ((P_0.CS )) )
peterson.4	G((!(P_0.CS )) -> F (P_0.CS ))
peterson.4	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS)
peterson.5	G ((P_0.wait|P_0.q2|P_0.q3 ) -> F ((P_0.CS )) )
peterson.5	G((!(P_0.CS )) -> F (P_0.CS ))
peterson.5	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS)
peterson.6	G ((P_0.wait|P_0.q2|P_0.q3 ) -> F ((P_0.CS )) )
peterson.6	G((!(P_0.CS )) -> F (P_0.CS ))
peterson.6	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS)
peterson.7	G ((P_0.wait|P_0.q2|P_0.q3 ) -> F ((P_0.CS )) )
peterson.7	G((!(P_0.CS )) -> F (P_0.CS ))
peterson.7	GF (P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_4.CS)
phils.1	GF (phil_0.eat )
phils.1	G ((phil_0.one ) -> F (phil_0.eat ))
phils.1	GF (phil_0.eat|phil_1.eat|phil_2.eat|phil_3.eat)
phils.2	GF (phil_0.eat )
phils.2	G ((phil_0.one ) -> F (phil_0.eat ))
phils.2	GF (phil_0.eat|phil_1.eat|phil_2.eat|phil_3.eat|phil_4.eat)
phils.3	GF (phil_0.eat )
phils.3	G ((phil_0.one ) -> F (phil_0.eat ))
phils.3	GF (phil_0.eat|phil_1.eat|phil_2.eat|phil_3.eat|phil_4.eat|phil_5.eat)
phils.4	GF (phil_0.eat )
phils.4	G ((phil_0.one ) -> F (phil_0.eat ))
phils.4	GF (phil_0.eat|phil_1.eat|phil_2.eat|phil_3.eat|phil_4.eat|phil_5.eat|phil_6.eat|phil_7.eat|phil_8.eat)
phils.5	GF (phil_0.eat )
phils.5	G ((phil_0.one ) -> F (phil_0.eat ))
phils.5	GF (phil_0.eat|phil_1.eat|phil_2.eat|phil_3.eat|phil_4.eat|phil_5.eat|phil_6.eat|phil_7.eat|phil_8.eat|phil_9.eat|phil_10.eat|phil_11.eat)
phils.6	GF (phil_0.eat )
phils.6	G ((phil_0.one ) -> F (phil_0.eat ))
phils.6	GF (phil_0.eat|phil_1.eat|phil_2.eat|phil_3.eat|phil_4.eat|phil_5.eat|phil_6.eat|phil_7.eat|phil_8.eat|phil_9.eat|phil_10.eat|phil_11.eat|phil_12.eat|phil_13.eat|phil_14.eat)
phils.7	GF (phil_0.eat )
phils.7	G ((phil_0.one ) -> F (phil_0.eat ))
phils.7	GF (phil_0.eat|phil_1.eat|phil_2.eat|phil_3.eat|phil_4.eat|phil_5.eat|phil_6.eat|phil_7.eat|phil_8.eat|phil_9.eat|phil_10.eat|phil_11.eat|phil_12.eat)
phils.8	GF (phil_0.eat )
phils.8	G ((phil_0.one ) -> F (phil_0.eat ))
phils.8	GF (phil_0.eat|phil_1.eat|phil_2.eat|phil_3.eat|phil_4.eat|phil_5.eat|phil_6.eat|phil_7.eat|phil_8.eat|phil_9.eat|phil_10.eat|phil_11.eat|phil_12.eat|phil_13.eat|phil_14.eat|phil_15.eat)
plc.1	GF(("B3 == 7" ) | ("time >= 100")) & GF(("B3 == cempty" ) | ("time >= 100" ))
plc.1	F("batches >= 5")
plc.1	F("time >= 100" )
plc.2	GF(("B3 == 7" ) | ("time >= 300")) & GF(("B3 == cempty" ) | ("time >= 300" ))
plc.2	F("batches >= 5")
plc.2	F("time >= 300" )
plc.3	GF(("B3 == 7" ) | ("time >= 500")) & GF(("B3 == cempty" ) | ("time >= 500" ))
plc.3	F("batches >= 5")
plc.3	F("time >= 500" )
plc.4	GF(("B3 == 7" ) | ("time >= 600")) & GF(("B3 == cempty" ) | ("time >= 600" ))
plc.4	F("batches >= 5")
plc.4	F("time >= 600" )
pouring.1	F(Bottle_1.q4)
pouring.2	F(Bottle_1.q4)
production_cell.1	F("done == 0")
production_cell.2	F("done == 5")
production_cell.3	F("done == 0")
production_cell.4	F("done == 4")
production_cell.5	F("done == 0")
production_cell.6	F("done == 0")
protocols.1	F ((Consumer.consume0 ) || (Consumer.consume1 ))
protocols.1	GF ((Consumer.consume0 ) || (Consumer.consume1 ))
protocols.1	((Producer.ready ) U (Producer.produce0 )) -> (((Consumer.ready || Consumer.got_msg ) U (Consumer.consume0 )) || G (Consumer.ready || Consumer.got_msg ))
protocols.2	F ((Consumer.consume0 ) || (Consumer.consume1 ))
protocols.2	GF ((Consumer.consume0 ) || (Consumer.consume1 ))
protocols.2	((Producer.ready ) U (Producer.produce0 )) -> (((Consumer.ready || Consumer.got_msg ) U (Consumer.consume0 )) || G (Consumer.ready || Consumer.got_msg ))
protocols.3	F ((Consumer.consume0 ) || (Consumer.consume1 ))
protocols.3	GF ((Consumer.consume0 ) || (Consumer.consume1 ))
protocols.3	((Producer.ready ) U (Producer.produce0 )) -> (((Consumer.ready || Consumer.got_msg ) U (Consumer.consume0 )) || G (Consumer.ready || Consumer.got_msg ))
protocols.4	F ((Consumer.consume0 ) || (Consumer.consume1 ))
protocols.4	GF ((Consumer.consume0 ) || (Consumer.consume1 ))
protocols.4	((Producer.ready ) U (Producer.produce0 )) -> (((Consumer.ready || Consumer.got_msg ) U (Consumer.consume0 )) || G (Consumer.ready || Consumer.got_msg ))
protocols.5	F ((Consumer.consume0 ) || (Consumer.consume1 ))
protocols.5	GF ((Consumer.consume0 ) || (Consumer.consume1 ))
protocols.5	((Producer.ready ) U (Producer.produce0 )) -> (((Consumer.ready || Consumer.got_msg ) U (Consumer.consume0 )) || G (Consumer.ready || Consumer.got_msg ))
public_subscribe.1	G((CC.doneCheckOut ) -> F((CC.doneCheckedOut ) || (CC.doneNotAvailable)))
public_subscribe.1	G((CC.doneCheckedOut ) -> F((CC.doneCheckIn ) || (CC.doneUnCheckOut)))
public_subscribe.1	!(!((User_0.doneGet ) || (User_0.doneRegister )) U (UserAdmin_0.doneNotify )) & G((User_0.doneUnRegister ) -> !(!((User_0.doneGet ) || (User_0.doneRegister )) U (UserAdmin_0.doneNotify )))
public_subscribe.2	G((CC.doneCheckOut ) -> F((CC.doneCheckedOut ) || (CC.doneNotAvailable)))
public_subscribe.2	G((CC.doneCheckedOut ) -> F((CC.doneCheckIn ) || (CC.doneUnCheckOut)))
public_subscribe.2	!(!((User_0.doneGet ) || (User_0.doneRegister )) U (UserAdmin_0.doneNotify )) & G((User_0.doneUnRegister ) -> !(!((User_0.doneGet ) || (User_0.doneRegister )) U (UserAdmin_0.doneNotify )))
public_subscribe.3	G((CC.doneCheckOut ) -> F((CC.doneCheckedOut ) || (CC.doneNotAvailable)))
public_subscribe.3	G((CC.doneCheckedOut ) -> F((CC.doneCheckIn ) || (CC.doneUnCheckOut)))
public_subscribe.3	!(!((User_0.doneGet ) || (User_0.doneRegister )) U (UserAdmin_0.doneNotify )) & G((User_0.doneUnRegister ) -> !(!((User_0.doneGet ) || (User_0.doneRegister )) U (UserAdmin_0.doneNotify )))
public_subscribe.4	G((CC.doneCheckOut ) -> F((CC.doneCheckedOut ) || (CC.doneNotAvailable)))
public_subscribe.4	G((CC.doneCheckedOut ) -> F((CC.doneCheckIn ) || (CC.doneUnCheckOut)))
public_subscribe.4	!(!((User_0.doneGet ) || (User_0.doneRegister )) U (UserAdmin_0.doneNotify )) & G((User_0.doneUnRegister ) -> !(!((User_0.doneGet ) || (User_0.doneRegister )) U (UserAdmin_0.doneNotify )))
public_subscribe.5	G((CC.doneCheckOut ) -> F((CC.doneCheckedOut ) || (CC.doneNotAvailable)))
public_subscribe.5	G((CC.doneCheckedOut ) -> F((CC.doneCheckIn ) || (CC.doneUnCheckOut)))
public_subscribe.5	!(!((User_0.doneGet ) || (User_0.doneRegister )) U (UserAdmin_0.doneNotify )) & G((User_0.doneUnRegister ) -> !(!((User_0.doneGet ) || (User_0.doneRegister )) U (UserAdmin_0.doneNotify )))
reader_writer.1	F(control.q_error )
reader_writer.2	F(control.q_error )
reader_writer.3	F(control.q_error )
resistance.1	F((Measuring_0.measure_in_progress) &!("cage_safe == 1" ))
resistance.1	F((Algorithm.too_small_resistance) &!("range == 0" ))
resistance.1	F(Algorithm.too_large_resistance) &!("range == 5" )
resistance.1	G (F (Algorithm.correct_value))
resistance.2	F((Measuring_0.measure_in_progress) &!("cage_safe == 1" ))
resistance.2	F((Algorithm.too_small_resistance) &!("range == 0" ))
resistance.2	F(Algorithm.too_large_resistance) &!("range == 5" )
resistance.2	G (F (Algorithm.correct_value))
rether.1	F(Node_0.error_st )
rether.1	G((Node_0.reserved ) -> (! (Token.cycle_end ) U ((Token.cycle_end ) U (!(Token.cycle_end ) & ((Node_0.RT_action ) R !(Token.cycle_end ))))))
rether.1	G ((Node_0.want_RT ) -> (! (Token.cycle_end ) U ((Token.cycle_end ) U (!(Token.cycle_end ) & ((Node_0.RT_action ) R !(Token.cycle_end ))))))
rether.1	G ((Node_0.reserved ) ->  ((Node_0.RT_action ) R !(Token.cycle_end )))
rether.1	GF (Node_0.NRT_action )
rether.1	GF (Node_0.RT_action )
rether.2	F(Node_0.error_st )
rether.2	G((Node_0.reserved ) -> (! (Token.cycle_end ) U ((Token.cycle_end ) U (!(Token.cycle_end ) & ((Node_0.RT_action ) R !(Token.cycle_end ))))))
rether.2	G ((Node_0.want_RT ) -> (! (Token.cycle_end ) U ((Token.cycle_end ) U (!(Token.cycle_end ) & ((Node_0.RT_action ) R !(Token.cycle_end ))))))
rether.2	G ((Node_0.reserved ) ->  ((Node_0.RT_action ) R !(Token.cycle_end )))
rether.2	GF (Node_0.NRT_action )
rether.2	GF (Node_0.RT_action )
rether.3	F(Node_0.error_st )
rether.3	G((Node_0.reserved ) -> (! (Token.cycle_end ) U ((Token.cycle_end ) U (!(Token.cycle_end ) & ((Node_0.RT_action ) R !(Token.cycle_end ))))))
rether.3	G ((Node_0.want_RT ) -> (! (Token.cycle_end ) U ((Token.cycle_end ) U (!(Token.cycle_end ) & ((Node_0.RT_action ) R !(Token.cycle_end ))))))
rether.3	G ((Node_0.reserved ) ->  ((Node_0.RT_action ) R !(Token.cycle_end )))
rether.3	GF (Node_0.NRT_action )
rether.3	GF (Node_0.RT_action )
rether.4	F(Node_0.error_st )
rether.4	G((Node_0.reserved ) -> (! (Token.cycle_end ) U ((Token.cycle_end ) U (!(Token.cycle_end ) & ((Node_0.RT_action ) R !(Token.cycle_end ))))))
rether.4	G ((Node_0.want_RT ) -> (! (Token.cycle_end ) U ((Token.cycle_end ) U (!(Token.cycle_end ) & ((Node_0.RT_action ) R !(Token.cycle_end ))))))
rether.4	G ((Node_0.reserved ) ->  ((Node_0.RT_action ) R !(Token.cycle_end )))
rether.4	GF (Node_0.NRT_action )
rether.4	GF (Node_0.RT_action )
rether.5	F(Node_0.error_st )
rether.5	G((Node_0.reserved ) -> (! (Token.cycle_end ) U ((Token.cycle_end ) U (!(Token.cycle_end ) & ((Node_0.RT_action ) R !(Token.cycle_end ))))))
rether.5	G ((Node_0.want_RT ) -> (! (Token.cycle_end ) U ((Token.cycle_end ) U (!(Token.cycle_end ) & ((Node_0.RT_action ) R !(Token.cycle_end ))))))
rether.5	G ((Node_0.reserved ) ->  ((Node_0.RT_action ) R !(Token.cycle_end )))
rether.5	GF (Node_0.NRT_action )
rether.5	GF (Node_0.RT_action )
rether.6	F(Node_0.error_st )
rether.6	G((Node_0.reserved ) -> (! (Token.cycle_end ) U ((Token.cycle_end ) U (!(Token.cycle_end ) & ((Node_0.RT_action ) R !(Token.cycle_end ))))))
rether.6	G ((Node_0.want_RT ) -> (! (Token.cycle_end ) U ((Token.cycle_end ) U (!(Token.cycle_end ) & ((Node_0.RT_action ) R !(Token.cycle_end ))))))
rether.6	G ((Node_0.reserved ) ->  ((Node_0.RT_action ) R !(Token.cycle_end )))
rether.6	GF (Node_0.NRT_action )
rether.6	GF (Node_0.RT_action )
rether.7	F(Node_0.error_st )
rether.7	G((Node_0.reserved ) -> (! (Token.cycle_end ) U ((Token.cycle_end ) U (!(Token.cycle_end ) & ((Node_0.RT_action ) R !(Token.cycle_end ))))))
rether.7	G ((Node_0.want_RT ) -> (! (Token.cycle_end ) U ((Token.cycle_end ) U (!(Token.cycle_end ) & ((Node_0.RT_action ) R !(Token.cycle_end ))))))
rether.7	G ((Node_0.reserved ) ->  ((Node_0.RT_action ) R !(Token.cycle_end )))
rether.7	GF (Node_0.NRT_action )
rether.7	GF (Node_0.RT_action )
rushhour.1	F(Red_car.out )
rushhour.2	F(Red_car.out )
rushhour.3	F(Red_car.out )
rushhour.4	F(Red_car.out )
schedule_world.1	F(P.done )
schedule_world.2	F(P.done )
schedule_world.3	F(P.done )
sokoban.1	F("done == 1" )
sokoban.2	F("done == 1" )
sokoban.3	F("done == 1" )
synapse.1	F(Cache_0.error_st )
synapse.1	(G ! ("written_line == 1" & "written_value == 1")) -> (G ! ("read_line == 1" && "read_value == 1"))
synapse.1	G (("written_line == 1" && "written_value == 1") -> ((G ! ("written_line == 1" && "written_value == 0")) || ((! ("read_line == 1" && "read_value == 0")) U (("written_line == 1" && "written_value == 0"))) ))
synapse.2	F(Cache_0.error_st )
synapse.2	(G ! ("written_line == 1" & "written_value == 1")) -> (G ! ("read_line == 1" && "read_value == 1"))
synapse.2	G (("written_line == 1" && "written_value == 1") -> ((G ! ("written_line == 1" && "written_value == 0")) || ((! ("read_line == 1" && "read_value == 0")) U (("written_line == 1" && "written_value == 0"))) ))
synapse.3	F(Cache_0.error_st )
synapse.3	(G ! ("written_line == 1" & "written_value == 1")) -> (G ! ("read_line == 1" && "read_value == 1"))
synapse.3	G (("written_line == 1" && "written_value == 1") -> ((G ! ("written_line == 1" && "written_value == 0")) || ((! ("read_line == 1" && "read_value == 0")) U (("written_line == 1" && "written_value == 0"))) ))
synapse.4	F(Cache_0.error_st )
synapse.4	(G ! ("written_line == 1" & "written_value == 1")) -> (G ! ("read_line == 1" && "read_value == 1"))
synapse.4	G (("written_line == 1" && "written_value == 1") -> ((G ! ("written_line == 1" && "written_value == 0")) || ((! ("read_line == 1" && "read_value == 0")) U (("written_line == 1" && "written_value == 0"))) ))
synapse.5	F(Cache_0.error_st )
synapse.5	(G ! ("written_line == 1" & "written_value == 1")) -> (G ! ("read_line == 1" && "read_value == 1"))
synapse.5	G (("written_line == 1" && "written_value == 1") -> ((G ! ("written_line == 1" && "written_value == 0")) || ((! ("read_line == 1" && "read_value == 0")) U (("written_line == 1" && "written_value == 0"))) ))
synapse.6	F(Cache_0.error_st )
synapse.6	(G ! ("written_line == 1" & "written_value == 1")) -> (G ! ("read_line == 1" && "read_value == 1"))
synapse.6	G (("written_line == 1" && "written_value == 1") -> ((G ! ("written_line == 1" && "written_value == 0")) || ((! ("read_line == 1" && "read_value == 0")) U (("written_line == 1" && "written_value == 0"))) ))
synapse.7	F(Cache_0.error_st )
synapse.7	(G ! ("written_line == 1" & "written_value == 1")) -> (G ! ("read_line == 1" && "read_value == 1"))
synapse.7	G (("written_line == 1" && "written_value == 1") -> ((G ! ("written_line == 1" && "written_value == 0")) || ((! ("read_line == 1" && "read_value == 0")) U (("written_line == 1" && "written_value == 0"))) ))
szymanski.1	G ((P_0.p2 ) -> F ((P_0.CS )) )
szymanski.1	G((!(P_0.CS )) -> F (P_0.CS ))
szymanski.1	GF(P_0.CS|P_1.CS|P_2.CS)
szymanski.2	G ((P_0.p2 ) -> F ((P_0.CS )) )
szymanski.2	G((!(P_0.CS )) -> F (P_0.CS ))
szymanski.2	GF(P_0.CS|P_1.CS|P_2.CS)
szymanski.3	G ((P_0.p2 ) -> F ((P_0.CS )) )
szymanski.3	G((!(P_0.CS )) -> F (P_0.CS ))
szymanski.3	GF(P_0.CS|P_1.CS|P_2.CS|P_3.CS)
szymanski.4	G ((P_0.p2 ) -> F ((P_0.CS )) )
szymanski.4	G((!(P_0.CS )) -> F (P_0.CS ))
szymanski.4	GF(P_0.CS|P_1.CS|P_2.CS|P_3.CS)
szymanski.5	G ((P_0.p2 ) -> F ((P_0.CS )) )
szymanski.5	G((!(P_0.CS )) -> F (P_0.CS ))
szymanski.5	GF(P_0.CS|P_1.CS|P_2.CS|P_3.CS|P_5.CS)
telephony.1	F(User_0.error_state)
telephony.2	F(User_0.error_state)
telephony.3	F(User_0.error_state)
telephony.4	F(User_0.error_state)
telephony.5	F(User_0.error_state)
telephony.6	F(User_0.error_state)
telephony.7	F(User_0.error_state)
telephony.8	F(User_0.error_state)
train-gate.1	F((Train_1.Cross ) & (Train_2.Cross ))
train-gate.1	G ((Train_1.Appr ) -> F (Train_1.Cross ))
