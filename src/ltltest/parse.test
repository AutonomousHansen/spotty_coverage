#! /bin/sh

# Check that spot::ltl::parse succeed on valid input, and that
# dump and dotty will work with the resulting trees.  Note that
# this doesn't check that the tree is correct w.r.t. the formula.

. ./defs || exit 1

for f in \
  '0' \
  '1' \
  'true' \
  'false' \
  'a' \
  'p11011' \
  '(p11011)' \
  'a & b' \
  'a * _b12' \
  'a . b' \
  'a + b' \
  'a3214 | b' \
  'a & b' \
  'a && b' \
  'a || b' \
  'a | b' \
  '_a_ U b' \
  'a R b' \
  'a <=> b' \
  'a <-> b' \
  'a ^ b' \
  'a => b' \
  'a -> b' \
  'F b' \
  'Gb' \
  'G(b)' \
  '!G(!b)' \
  '!b' \
  '[]b' \
  '<>b' \
  'X b' \
  '()b' \
  'long_atomic_proposition_1 U long_atomic_proposition_2' \
  '  ab & ac | ad ^ af' \
  '(ab & ac | ad ) <=> af ' \
  'a U b U c U d U e U f U g U h U i U j U k U l U m' \
  '(ab * !Xad + ad U ab) & FG p12 & GF p13' \
  '((([]<>()p12))   )' \
  'a R ome V anille'
do
  if ./ltl2text "$f"; then
    :
  else
    echo "ltl2dot failed to parse '$f'"
    exit 1
  fi

  if test -n "$DOT"; then
    ./ltl2dot "$f" > parse.dot 
    if $DOT -o /dev/null parse.dot; then
      rm -f parse.dot
    else
      rm -f parse.dot
      echo "dot failed to parse ltl2dot output for '$f'"
      exit 1
    fi
  fi
done