#! /bin/sh
# -*- coding: utf-8 -*-
# Copyright (C) 2013, 2014, 2015 Laboratoire de Recherche et
# Développement de l'Epita (LRDE).
#
# This file is part of Spot, a model checking library.
#
# Spot is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Spot is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. ./defs

run 0 ../../bin/ltlfilt -q --remove-x -f 'Xa' --equivalent-to 'Ga | (!a & Fa)'

run 1 ../../bin/ltlfilt -q --stutter-invariant -f 'Xa'

run 0 ../../bin/ltlfilt -q --stutter-invariant -f 'F(!a & Xa & Xb)'

run 1 ../../bin/ltlfilt -q --stutter-invariant -f 'F(Xa & Xb)'

run 0 ../../bin/ltlfilt --remove-x -f 'F(!a & Xa & Xb)' > out
grep -v X out
run 0 ../../bin/ltlfilt -q --stutter-invariant -F 'out'


run 1 ../../bin/ltlfilt -q --stutter-invariant -f 'F(!a & Xb)'
run 0 ../../bin/ltlfilt --remove-x -f 'F(!a & Xb)' > out
grep -v X out
# The output is stutter invariant, even if the input wasn't.
run 0 ../../bin/ltlfilt -q --stutter-invariant -F 'out'


## This tests remove_x on PSL formulas.  Unfortunately we
## found that construction in the Dax et al. paper seems incorrect
## in at least two points.
##
##   Lemma 4 is wrong w.r.t. intersection: the SERE a && (a; a) has an
##   empty language, but its rewriting with κ has a+ for language.
##   Both languages are stutter-invariant, and yet they are different,
##   contradicting Lemma 4.
##
##   Lemma 9 is wrong w.r.t. the <>-> operator: the PSL formula
##   {a}<>->b is equivalent to a&b (which is stutter invariant) but
##   its rewriting with τ gives the siPSL formula {a[+]}<>->b which is
##   equivalent to b M a, a different stutter-invariant language.
##   Since both languages are stutter-invariant, this contradict Lemma 9.
##
## The following commands were used to find the above problems for
## Lemma 9 (Remove the --sere-prio=and=0,andNLM=0 to find
## counterexamples for lemma 4.)
# ../../bin/randltl --psl --sere-prio=and=0,andNLM=0 -n -1 a b |
# ../../bin/ltlfilt -v --syntactic-stutter-invariant |
# ../../bin/ltlfilt --stutter-invariant -n 100 > formulas
#
# run 0 ../../bin/ltlfilt --remove-x < formulas > formulas.nox
# paste -d, formulas formulas.nox > input
#
# : > bugs
# while IFS=, read fin fou; do
#     ../../bin/ltlfilt -q -f "$fin" --equivalent-to "$fou" || exit 1
# done < input
